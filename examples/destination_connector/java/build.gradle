plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // Updated protobuf plugin version for Gradle 9.0+ compatibility
    id 'com.google.protobuf' version '0.9.4'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    id 'java'
}

repositories { 
    maven { // The google mirror is less flaky than mavenCentral()
        url = "https://maven-central.storage-download.googleapis.com/maven2/"

        artifactUrls = ["https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/"]
    }
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

def grpcVersion = '1.61.1'
def protobufVersion = '3.25.2'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation "com.fasterxml.jackson.core:jackson-core:2.15.2"

    implementation 'com.github.luben:zstd-jni:1.5.5-11'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.2.3'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

application {
    mainClass = 'destination.JavaDestination'
}

tasks.register('copyProtos', Copy) {
    from file("$rootDir/../../..")
    into file("src/main/proto/")
    include "*.proto"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
            'Main-Class' : 'destination.JavaDestination'
        )
    }

    from {
        configurations.runtimeClasspath.filter{ it.exists() }.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
