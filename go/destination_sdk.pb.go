// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: destination_sdk.proto

package fivetran_sdk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Encryption int32

const (
	Encryption_None Encryption = 0
	Encryption_Aes  Encryption = 1
)

// Enum value maps for Encryption.
var (
	Encryption_name = map[int32]string{
		0: "None",
		1: "Aes",
	}
	Encryption_value = map[string]int32{
		"None": 0,
		"Aes":  1,
	}
)

func (x Encryption) Enum() *Encryption {
	p := new(Encryption)
	*p = x
	return p
}

func (x Encryption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encryption) Descriptor() protoreflect.EnumDescriptor {
	return file_destination_sdk_proto_enumTypes[0].Descriptor()
}

func (Encryption) Type() protoreflect.EnumType {
	return &file_destination_sdk_proto_enumTypes[0]
}

func (x Encryption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encryption.Descriptor instead.
func (Encryption) EnumDescriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{0}
}

type Compression int32

const (
	Compression_Off  Compression = 0
	Compression_Zstd Compression = 1
	Compression_Gzip Compression = 2
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "Off",
		1: "Zstd",
		2: "Gzip",
	}
	Compression_value = map[string]int32{
		"Off":  0,
		"Zstd": 1,
		"Gzip": 2,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_destination_sdk_proto_enumTypes[1].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_destination_sdk_proto_enumTypes[1]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{1}
}

type DescribeTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration map[string]string `protobuf:"bytes,1,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SchemaName    string            `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName     string            `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *DescribeTableRequest) Reset() {
	*x = DescribeTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableRequest) ProtoMessage() {}

func (x *DescribeTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableRequest.ProtoReflect.Descriptor instead.
func (*DescribeTableRequest) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{0}
}

func (x *DescribeTableRequest) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *DescribeTableRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *DescribeTableRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type DescribeTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*DescribeTableResponse_NotFound
	//	*DescribeTableResponse_Failure
	//	*DescribeTableResponse_Table
	Response isDescribeTableResponse_Response `protobuf_oneof:"response"`
}

func (x *DescribeTableResponse) Reset() {
	*x = DescribeTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTableResponse) ProtoMessage() {}

func (x *DescribeTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTableResponse.ProtoReflect.Descriptor instead.
func (*DescribeTableResponse) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{1}
}

func (m *DescribeTableResponse) GetResponse() isDescribeTableResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *DescribeTableResponse) GetNotFound() bool {
	if x, ok := x.GetResponse().(*DescribeTableResponse_NotFound); ok {
		return x.NotFound
	}
	return false
}

func (x *DescribeTableResponse) GetFailure() string {
	if x, ok := x.GetResponse().(*DescribeTableResponse_Failure); ok {
		return x.Failure
	}
	return ""
}

func (x *DescribeTableResponse) GetTable() *Table {
	if x, ok := x.GetResponse().(*DescribeTableResponse_Table); ok {
		return x.Table
	}
	return nil
}

type isDescribeTableResponse_Response interface {
	isDescribeTableResponse_Response()
}

type DescribeTableResponse_NotFound struct {
	NotFound bool `protobuf:"varint,1,opt,name=not_found,json=notFound,proto3,oneof"`
}

type DescribeTableResponse_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

type DescribeTableResponse_Table struct {
	Table *Table `protobuf:"bytes,3,opt,name=table,proto3,oneof"`
}

func (*DescribeTableResponse_NotFound) isDescribeTableResponse_Response() {}

func (*DescribeTableResponse_Failure) isDescribeTableResponse_Response() {}

func (*DescribeTableResponse_Table) isDescribeTableResponse_Response() {}

type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration map[string]string `protobuf:"bytes,1,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SchemaName    string            `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Table         *Table            `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTableRequest) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *CreateTableRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *CreateTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type CreateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CreateTableResponse_Success
	//	*CreateTableResponse_Failure
	Response isCreateTableResponse_Response `protobuf_oneof:"response"`
}

func (x *CreateTableResponse) Reset() {
	*x = CreateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponse) ProtoMessage() {}

func (x *CreateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{3}
}

func (m *CreateTableResponse) GetResponse() isCreateTableResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CreateTableResponse) GetSuccess() bool {
	if x, ok := x.GetResponse().(*CreateTableResponse_Success); ok {
		return x.Success
	}
	return false
}

func (x *CreateTableResponse) GetFailure() string {
	if x, ok := x.GetResponse().(*CreateTableResponse_Failure); ok {
		return x.Failure
	}
	return ""
}

type isCreateTableResponse_Response interface {
	isCreateTableResponse_Response()
}

type CreateTableResponse_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type CreateTableResponse_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*CreateTableResponse_Success) isCreateTableResponse_Response() {}

func (*CreateTableResponse_Failure) isCreateTableResponse_Response() {}

type AlterTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration map[string]string `protobuf:"bytes,1,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SchemaName    string            `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Table         *Table            `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *AlterTableRequest) Reset() {
	*x = AlterTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableRequest) ProtoMessage() {}

func (x *AlterTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableRequest.ProtoReflect.Descriptor instead.
func (*AlterTableRequest) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{4}
}

func (x *AlterTableRequest) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *AlterTableRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *AlterTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type AlterTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*AlterTableResponse_Success
	//	*AlterTableResponse_Failure
	Response isAlterTableResponse_Response `protobuf_oneof:"response"`
}

func (x *AlterTableResponse) Reset() {
	*x = AlterTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableResponse) ProtoMessage() {}

func (x *AlterTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableResponse.ProtoReflect.Descriptor instead.
func (*AlterTableResponse) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{5}
}

func (m *AlterTableResponse) GetResponse() isAlterTableResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *AlterTableResponse) GetSuccess() bool {
	if x, ok := x.GetResponse().(*AlterTableResponse_Success); ok {
		return x.Success
	}
	return false
}

func (x *AlterTableResponse) GetFailure() string {
	if x, ok := x.GetResponse().(*AlterTableResponse_Failure); ok {
		return x.Failure
	}
	return ""
}

type isAlterTableResponse_Response interface {
	isAlterTableResponse_Response()
}

type AlterTableResponse_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type AlterTableResponse_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*AlterTableResponse_Success) isAlterTableResponse_Response() {}

func (*AlterTableResponse_Failure) isAlterTableResponse_Response() {}

type TruncateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration   map[string]string      `protobuf:"bytes,1,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SchemaName      string                 `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName       string                 `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SyncedColumn    string                 `protobuf:"bytes,4,opt,name=synced_column,json=syncedColumn,proto3" json:"synced_column,omitempty"`
	UtcDeleteBefore *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=utc_delete_before,json=utcDeleteBefore,proto3" json:"utc_delete_before,omitempty"`
	Soft            *SoftTruncate          `protobuf:"bytes,6,opt,name=soft,proto3,oneof" json:"soft,omitempty"`
}

func (x *TruncateRequest) Reset() {
	*x = TruncateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateRequest) ProtoMessage() {}

func (x *TruncateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateRequest.ProtoReflect.Descriptor instead.
func (*TruncateRequest) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{6}
}

func (x *TruncateRequest) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *TruncateRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *TruncateRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TruncateRequest) GetSyncedColumn() string {
	if x != nil {
		return x.SyncedColumn
	}
	return ""
}

func (x *TruncateRequest) GetUtcDeleteBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.UtcDeleteBefore
	}
	return nil
}

func (x *TruncateRequest) GetSoft() *SoftTruncate {
	if x != nil {
		return x.Soft
	}
	return nil
}

type SoftTruncate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedColumn string `protobuf:"bytes,3,opt,name=deleted_column,json=deletedColumn,proto3" json:"deleted_column,omitempty"`
}

func (x *SoftTruncate) Reset() {
	*x = SoftTruncate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftTruncate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftTruncate) ProtoMessage() {}

func (x *SoftTruncate) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftTruncate.ProtoReflect.Descriptor instead.
func (*SoftTruncate) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{7}
}

func (x *SoftTruncate) GetDeletedColumn() string {
	if x != nil {
		return x.DeletedColumn
	}
	return ""
}

type TruncateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*TruncateResponse_Success
	//	*TruncateResponse_Failure
	Response isTruncateResponse_Response `protobuf_oneof:"response"`
}

func (x *TruncateResponse) Reset() {
	*x = TruncateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateResponse) ProtoMessage() {}

func (x *TruncateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateResponse.ProtoReflect.Descriptor instead.
func (*TruncateResponse) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{8}
}

func (m *TruncateResponse) GetResponse() isTruncateResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TruncateResponse) GetSuccess() bool {
	if x, ok := x.GetResponse().(*TruncateResponse_Success); ok {
		return x.Success
	}
	return false
}

func (x *TruncateResponse) GetFailure() string {
	if x, ok := x.GetResponse().(*TruncateResponse_Failure); ok {
		return x.Failure
	}
	return ""
}

type isTruncateResponse_Response interface {
	isTruncateResponse_Response()
}

type TruncateResponse_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type TruncateResponse_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*TruncateResponse_Success) isTruncateResponse_Response() {}

func (*TruncateResponse_Failure) isTruncateResponse_Response() {}

type WriteBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration map[string]string `protobuf:"bytes,1,rep,name=configuration,proto3" json:"configuration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SchemaName    string            `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Table         *Table            `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	Keys          map[string][]byte `protobuf:"bytes,4,rep,name=keys,proto3" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReplaceFiles  []string          `protobuf:"bytes,5,rep,name=replace_files,json=replaceFiles,proto3" json:"replace_files,omitempty"`
	UpdateFiles   []string          `protobuf:"bytes,6,rep,name=update_files,json=updateFiles,proto3" json:"update_files,omitempty"`
	DeleteFiles   []string          `protobuf:"bytes,7,rep,name=delete_files,json=deleteFiles,proto3" json:"delete_files,omitempty"`
	// Types that are assignable to FileParams:
	//
	//	*WriteBatchRequest_Csv
	FileParams isWriteBatchRequest_FileParams `protobuf_oneof:"file_params"`
}

func (x *WriteBatchRequest) Reset() {
	*x = WriteBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBatchRequest) ProtoMessage() {}

func (x *WriteBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBatchRequest.ProtoReflect.Descriptor instead.
func (*WriteBatchRequest) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{9}
}

func (x *WriteBatchRequest) GetConfiguration() map[string]string {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *WriteBatchRequest) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *WriteBatchRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *WriteBatchRequest) GetKeys() map[string][]byte {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *WriteBatchRequest) GetReplaceFiles() []string {
	if x != nil {
		return x.ReplaceFiles
	}
	return nil
}

func (x *WriteBatchRequest) GetUpdateFiles() []string {
	if x != nil {
		return x.UpdateFiles
	}
	return nil
}

func (x *WriteBatchRequest) GetDeleteFiles() []string {
	if x != nil {
		return x.DeleteFiles
	}
	return nil
}

func (m *WriteBatchRequest) GetFileParams() isWriteBatchRequest_FileParams {
	if m != nil {
		return m.FileParams
	}
	return nil
}

func (x *WriteBatchRequest) GetCsv() *CsvFileParams {
	if x, ok := x.GetFileParams().(*WriteBatchRequest_Csv); ok {
		return x.Csv
	}
	return nil
}

type isWriteBatchRequest_FileParams interface {
	isWriteBatchRequest_FileParams()
}

type WriteBatchRequest_Csv struct {
	Csv *CsvFileParams `protobuf:"bytes,8,opt,name=csv,proto3,oneof"`
}

func (*WriteBatchRequest_Csv) isWriteBatchRequest_FileParams() {}

type CsvFileParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Compression      Compression `protobuf:"varint,1,opt,name=compression,proto3,enum=fivetran_sdk.Compression" json:"compression,omitempty"`
	Encryption       Encryption  `protobuf:"varint,2,opt,name=encryption,proto3,enum=fivetran_sdk.Encryption" json:"encryption,omitempty"`
	NullString       string      `protobuf:"bytes,3,opt,name=null_string,json=nullString,proto3" json:"null_string,omitempty"`
	UnmodifiedString string      `protobuf:"bytes,4,opt,name=unmodified_string,json=unmodifiedString,proto3" json:"unmodified_string,omitempty"`
}

func (x *CsvFileParams) Reset() {
	*x = CsvFileParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvFileParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvFileParams) ProtoMessage() {}

func (x *CsvFileParams) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvFileParams.ProtoReflect.Descriptor instead.
func (*CsvFileParams) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{10}
}

func (x *CsvFileParams) GetCompression() Compression {
	if x != nil {
		return x.Compression
	}
	return Compression_Off
}

func (x *CsvFileParams) GetEncryption() Encryption {
	if x != nil {
		return x.Encryption
	}
	return Encryption_None
}

func (x *CsvFileParams) GetNullString() string {
	if x != nil {
		return x.NullString
	}
	return ""
}

func (x *CsvFileParams) GetUnmodifiedString() string {
	if x != nil {
		return x.UnmodifiedString
	}
	return ""
}

type WriteBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*WriteBatchResponse_Success
	//	*WriteBatchResponse_Failure
	Response isWriteBatchResponse_Response `protobuf_oneof:"response"`
}

func (x *WriteBatchResponse) Reset() {
	*x = WriteBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_destination_sdk_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBatchResponse) ProtoMessage() {}

func (x *WriteBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_destination_sdk_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBatchResponse.ProtoReflect.Descriptor instead.
func (*WriteBatchResponse) Descriptor() ([]byte, []int) {
	return file_destination_sdk_proto_rawDescGZIP(), []int{11}
}

func (m *WriteBatchResponse) GetResponse() isWriteBatchResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *WriteBatchResponse) GetSuccess() bool {
	if x, ok := x.GetResponse().(*WriteBatchResponse_Success); ok {
		return x.Success
	}
	return false
}

func (x *WriteBatchResponse) GetFailure() string {
	if x, ok := x.GetResponse().(*WriteBatchResponse_Failure); ok {
		return x.Failure
	}
	return ""
}

type isWriteBatchResponse_Response interface {
	isWriteBatchResponse_Response()
}

type WriteBatchResponse_Success struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3,oneof"`
}

type WriteBatchResponse_Failure struct {
	Failure string `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*WriteBatchResponse_Success) isWriteBatchResponse_Response() {}

func (*WriteBatchResponse_Failure) isWriteBatchResponse_Response() {}

var File_destination_sdk_proto protoreflect.FileDescriptor

var file_destination_sdk_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x64,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f,
	0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x01, 0x0a,
	0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66,
	0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64,
	0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x03,
	0x0a, 0x0f, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x46,
	0x0a, 0x11, 0x75, 0x74, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x75, 0x74, 0x63, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f,
	0x73, 0x64, 0x6b, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x22, 0x35, 0x0a, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x56, 0x0a,
	0x10, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x04, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64,
	0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3d, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x63,
	0x73, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x73, 0x76, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x03, 0x63, 0x73, 0x76, 0x1a, 0x40, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x09, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0d, 0x43, 0x73, 0x76, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x76, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a,
	0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x1f, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x65, 0x73, 0x10, 0x01, 0x2a, 0x2a, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x66, 0x66, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x5a, 0x73, 0x74, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x7a,
	0x69, 0x70, 0x10, 0x02, 0x32, 0xd6, 0x04, 0x0a, 0x06, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12,
	0x66, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x12, 0x26, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x66,
	0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x69, 0x76,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x66, 0x69, 0x76, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x69, 0x76, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x08, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x76, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x2e, 0x66, 0x69, 0x76, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x69, 0x76, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x48,
	0x01, 0x50, 0x01, 0x5a, 0x19, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x5f, 0x73, 0x64, 0x6b, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_destination_sdk_proto_rawDescOnce sync.Once
	file_destination_sdk_proto_rawDescData = file_destination_sdk_proto_rawDesc
)

func file_destination_sdk_proto_rawDescGZIP() []byte {
	file_destination_sdk_proto_rawDescOnce.Do(func() {
		file_destination_sdk_proto_rawDescData = protoimpl.X.CompressGZIP(file_destination_sdk_proto_rawDescData)
	})
	return file_destination_sdk_proto_rawDescData
}

var file_destination_sdk_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_destination_sdk_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_destination_sdk_proto_goTypes = []interface{}{
	(Encryption)(0),                   // 0: fivetran_sdk.Encryption
	(Compression)(0),                  // 1: fivetran_sdk.Compression
	(*DescribeTableRequest)(nil),      // 2: fivetran_sdk.DescribeTableRequest
	(*DescribeTableResponse)(nil),     // 3: fivetran_sdk.DescribeTableResponse
	(*CreateTableRequest)(nil),        // 4: fivetran_sdk.CreateTableRequest
	(*CreateTableResponse)(nil),       // 5: fivetran_sdk.CreateTableResponse
	(*AlterTableRequest)(nil),         // 6: fivetran_sdk.AlterTableRequest
	(*AlterTableResponse)(nil),        // 7: fivetran_sdk.AlterTableResponse
	(*TruncateRequest)(nil),           // 8: fivetran_sdk.TruncateRequest
	(*SoftTruncate)(nil),              // 9: fivetran_sdk.SoftTruncate
	(*TruncateResponse)(nil),          // 10: fivetran_sdk.TruncateResponse
	(*WriteBatchRequest)(nil),         // 11: fivetran_sdk.WriteBatchRequest
	(*CsvFileParams)(nil),             // 12: fivetran_sdk.CsvFileParams
	(*WriteBatchResponse)(nil),        // 13: fivetran_sdk.WriteBatchResponse
	nil,                               // 14: fivetran_sdk.DescribeTableRequest.ConfigurationEntry
	nil,                               // 15: fivetran_sdk.CreateTableRequest.ConfigurationEntry
	nil,                               // 16: fivetran_sdk.AlterTableRequest.ConfigurationEntry
	nil,                               // 17: fivetran_sdk.TruncateRequest.ConfigurationEntry
	nil,                               // 18: fivetran_sdk.WriteBatchRequest.ConfigurationEntry
	nil,                               // 19: fivetran_sdk.WriteBatchRequest.KeysEntry
	(*Table)(nil),                     // 20: fivetran_sdk.Table
	(*timestamppb.Timestamp)(nil),     // 21: google.protobuf.Timestamp
	(*ConfigurationFormRequest)(nil),  // 22: fivetran_sdk.ConfigurationFormRequest
	(*TestRequest)(nil),               // 23: fivetran_sdk.TestRequest
	(*ConfigurationFormResponse)(nil), // 24: fivetran_sdk.ConfigurationFormResponse
	(*TestResponse)(nil),              // 25: fivetran_sdk.TestResponse
}
var file_destination_sdk_proto_depIdxs = []int32{
	14, // 0: fivetran_sdk.DescribeTableRequest.configuration:type_name -> fivetran_sdk.DescribeTableRequest.ConfigurationEntry
	20, // 1: fivetran_sdk.DescribeTableResponse.table:type_name -> fivetran_sdk.Table
	15, // 2: fivetran_sdk.CreateTableRequest.configuration:type_name -> fivetran_sdk.CreateTableRequest.ConfigurationEntry
	20, // 3: fivetran_sdk.CreateTableRequest.table:type_name -> fivetran_sdk.Table
	16, // 4: fivetran_sdk.AlterTableRequest.configuration:type_name -> fivetran_sdk.AlterTableRequest.ConfigurationEntry
	20, // 5: fivetran_sdk.AlterTableRequest.table:type_name -> fivetran_sdk.Table
	17, // 6: fivetran_sdk.TruncateRequest.configuration:type_name -> fivetran_sdk.TruncateRequest.ConfigurationEntry
	21, // 7: fivetran_sdk.TruncateRequest.utc_delete_before:type_name -> google.protobuf.Timestamp
	9,  // 8: fivetran_sdk.TruncateRequest.soft:type_name -> fivetran_sdk.SoftTruncate
	18, // 9: fivetran_sdk.WriteBatchRequest.configuration:type_name -> fivetran_sdk.WriteBatchRequest.ConfigurationEntry
	20, // 10: fivetran_sdk.WriteBatchRequest.table:type_name -> fivetran_sdk.Table
	19, // 11: fivetran_sdk.WriteBatchRequest.keys:type_name -> fivetran_sdk.WriteBatchRequest.KeysEntry
	12, // 12: fivetran_sdk.WriteBatchRequest.csv:type_name -> fivetran_sdk.CsvFileParams
	1,  // 13: fivetran_sdk.CsvFileParams.compression:type_name -> fivetran_sdk.Compression
	0,  // 14: fivetran_sdk.CsvFileParams.encryption:type_name -> fivetran_sdk.Encryption
	22, // 15: fivetran_sdk.Writer.ConfigurationForm:input_type -> fivetran_sdk.ConfigurationFormRequest
	23, // 16: fivetran_sdk.Writer.Test:input_type -> fivetran_sdk.TestRequest
	2,  // 17: fivetran_sdk.Writer.DescribeTable:input_type -> fivetran_sdk.DescribeTableRequest
	4,  // 18: fivetran_sdk.Writer.CreateTable:input_type -> fivetran_sdk.CreateTableRequest
	6,  // 19: fivetran_sdk.Writer.AlterTable:input_type -> fivetran_sdk.AlterTableRequest
	8,  // 20: fivetran_sdk.Writer.Truncate:input_type -> fivetran_sdk.TruncateRequest
	11, // 21: fivetran_sdk.Writer.WriteBatch:input_type -> fivetran_sdk.WriteBatchRequest
	24, // 22: fivetran_sdk.Writer.ConfigurationForm:output_type -> fivetran_sdk.ConfigurationFormResponse
	25, // 23: fivetran_sdk.Writer.Test:output_type -> fivetran_sdk.TestResponse
	3,  // 24: fivetran_sdk.Writer.DescribeTable:output_type -> fivetran_sdk.DescribeTableResponse
	5,  // 25: fivetran_sdk.Writer.CreateTable:output_type -> fivetran_sdk.CreateTableResponse
	7,  // 26: fivetran_sdk.Writer.AlterTable:output_type -> fivetran_sdk.AlterTableResponse
	10, // 27: fivetran_sdk.Writer.Truncate:output_type -> fivetran_sdk.TruncateResponse
	13, // 28: fivetran_sdk.Writer.WriteBatch:output_type -> fivetran_sdk.WriteBatchResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_destination_sdk_proto_init() }
func file_destination_sdk_proto_init() {
	if File_destination_sdk_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_destination_sdk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftTruncate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvFileParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_destination_sdk_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_destination_sdk_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*DescribeTableResponse_NotFound)(nil),
		(*DescribeTableResponse_Failure)(nil),
		(*DescribeTableResponse_Table)(nil),
	}
	file_destination_sdk_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateTableResponse_Success)(nil),
		(*CreateTableResponse_Failure)(nil),
	}
	file_destination_sdk_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AlterTableResponse_Success)(nil),
		(*AlterTableResponse_Failure)(nil),
	}
	file_destination_sdk_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_destination_sdk_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TruncateResponse_Success)(nil),
		(*TruncateResponse_Failure)(nil),
	}
	file_destination_sdk_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*WriteBatchRequest_Csv)(nil),
	}
	file_destination_sdk_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*WriteBatchResponse_Success)(nil),
		(*WriteBatchResponse_Failure)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_destination_sdk_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_destination_sdk_proto_goTypes,
		DependencyIndexes: file_destination_sdk_proto_depIdxs,
		EnumInfos:         file_destination_sdk_proto_enumTypes,
		MessageInfos:      file_destination_sdk_proto_msgTypes,
	}.Build()
	File_destination_sdk_proto = out.File
	file_destination_sdk_proto_rawDesc = nil
	file_destination_sdk_proto_goTypes = nil
	file_destination_sdk_proto_depIdxs = nil
}
