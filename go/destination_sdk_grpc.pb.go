// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: destination_sdk.proto

package fivetran_sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Writer_ConfigurationForm_FullMethodName = "/fivetran_sdk.Writer/ConfigurationForm"
	Writer_Test_FullMethodName              = "/fivetran_sdk.Writer/Test"
	Writer_DescribeTable_FullMethodName     = "/fivetran_sdk.Writer/DescribeTable"
	Writer_CreateTable_FullMethodName       = "/fivetran_sdk.Writer/CreateTable"
	Writer_AlterTable_FullMethodName        = "/fivetran_sdk.Writer/AlterTable"
	Writer_Truncate_FullMethodName          = "/fivetran_sdk.Writer/Truncate"
	Writer_WriteBatch_FullMethodName        = "/fivetran_sdk.Writer/WriteBatch"
)

// WriterClient is the client API for Writer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriterClient interface {
	ConfigurationForm(ctx context.Context, in *ConfigurationFormRequest, opts ...grpc.CallOption) (*ConfigurationFormResponse, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	DescribeTable(ctx context.Context, in *DescribeTableRequest, opts ...grpc.CallOption) (*DescribeTableResponse, error)
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	AlterTable(ctx context.Context, in *AlterTableRequest, opts ...grpc.CallOption) (*AlterTableResponse, error)
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error)
	WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*WriteBatchResponse, error)
}

type writerClient struct {
	cc grpc.ClientConnInterface
}

func NewWriterClient(cc grpc.ClientConnInterface) WriterClient {
	return &writerClient{cc}
}

func (c *writerClient) ConfigurationForm(ctx context.Context, in *ConfigurationFormRequest, opts ...grpc.CallOption) (*ConfigurationFormResponse, error) {
	out := new(ConfigurationFormResponse)
	err := c.cc.Invoke(ctx, Writer_ConfigurationForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, Writer_Test_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) DescribeTable(ctx context.Context, in *DescribeTableRequest, opts ...grpc.CallOption) (*DescribeTableResponse, error) {
	out := new(DescribeTableResponse)
	err := c.cc.Invoke(ctx, Writer_DescribeTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, Writer_CreateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) AlterTable(ctx context.Context, in *AlterTableRequest, opts ...grpc.CallOption) (*AlterTableResponse, error) {
	out := new(AlterTableResponse)
	err := c.cc.Invoke(ctx, Writer_AlterTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error) {
	out := new(TruncateResponse)
	err := c.cc.Invoke(ctx, Writer_Truncate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writerClient) WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*WriteBatchResponse, error) {
	out := new(WriteBatchResponse)
	err := c.cc.Invoke(ctx, Writer_WriteBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterServer is the server API for Writer service.
// All implementations must embed UnimplementedWriterServer
// for forward compatibility
type WriterServer interface {
	ConfigurationForm(context.Context, *ConfigurationFormRequest) (*ConfigurationFormResponse, error)
	Test(context.Context, *TestRequest) (*TestResponse, error)
	DescribeTable(context.Context, *DescribeTableRequest) (*DescribeTableResponse, error)
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	AlterTable(context.Context, *AlterTableRequest) (*AlterTableResponse, error)
	Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error)
	WriteBatch(context.Context, *WriteBatchRequest) (*WriteBatchResponse, error)
	mustEmbedUnimplementedWriterServer()
}

// UnimplementedWriterServer must be embedded to have forward compatible implementations.
type UnimplementedWriterServer struct {
}

func (UnimplementedWriterServer) ConfigurationForm(context.Context, *ConfigurationFormRequest) (*ConfigurationFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationForm not implemented")
}
func (UnimplementedWriterServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedWriterServer) DescribeTable(context.Context, *DescribeTableRequest) (*DescribeTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTable not implemented")
}
func (UnimplementedWriterServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedWriterServer) AlterTable(context.Context, *AlterTableRequest) (*AlterTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedWriterServer) Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedWriterServer) WriteBatch(context.Context, *WriteBatchRequest) (*WriteBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteBatch not implemented")
}
func (UnimplementedWriterServer) mustEmbedUnimplementedWriterServer() {}

// UnsafeWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriterServer will
// result in compilation errors.
type UnsafeWriterServer interface {
	mustEmbedUnimplementedWriterServer()
}

func RegisterWriterServer(s grpc.ServiceRegistrar, srv WriterServer) {
	s.RegisterService(&Writer_ServiceDesc, srv)
}

func _Writer_ConfigurationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).ConfigurationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_ConfigurationForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).ConfigurationForm(ctx, req.(*ConfigurationFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_DescribeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).DescribeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_DescribeTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).DescribeTable(ctx, req.(*DescribeTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_AlterTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).AlterTable(ctx, req.(*AlterTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_Truncate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Writer_WriteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServer).WriteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Writer_WriteBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServer).WriteBatch(ctx, req.(*WriteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Writer_ServiceDesc is the grpc.ServiceDesc for Writer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Writer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fivetran_sdk.Writer",
	HandlerType: (*WriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigurationForm",
			Handler:    _Writer_ConfigurationForm_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Writer_Test_Handler,
		},
		{
			MethodName: "DescribeTable",
			Handler:    _Writer_DescribeTable_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _Writer_CreateTable_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _Writer_AlterTable_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _Writer_Truncate_Handler,
		},
		{
			MethodName: "WriteBatch",
			Handler:    _Writer_WriteBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "destination_sdk.proto",
}
